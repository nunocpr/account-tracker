// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

//* --------------------------------- *//
//*            AUTH MODELS            *//
//* --------------------------------- *//
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.String
    access_token      String? @map("accessToken") @db.String
    expires_at        Int?    @map("expiresAt")
    token_type        String?
    scope             String?
    id_token          String? @map("idToken") @db.String
    session_state     String?

    @@unique([provider, providerAccountId])
}

model User {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    email          String         @unique
    username       String?        @unique
    hashedPassword String?        @map("password")
    emailVerified  DateTime?      @map("verifiedAt")
    image          String?
    accounts       Account[]
    sessions       Session[]
    transactions   Transaction[]
    mainCategories MainCategory[]
    subCategories  SubCategory[]
    createdAt      DateTime       @default(now())
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String   @db.ObjectId
    expires      DateTime @map("expiresAt")
}

//* --------------------------------- *//
//*         TRANSACTION MODELS        *//
//* --------------------------------- *//

model Transaction {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    type           String
    amount         Float
    description    String?
    mainCategory   MainCategory? @relation(fields: [mainCategoryId], references: [id])
    mainCategoryId String?       @db.ObjectId
    subCategory    SubCategory?  @relation(fields: [subCategoryId], references: [id])
    subCategoryId  String?       @db.ObjectId
    user           User          @relation(fields: [userId], references: [id])
    userId         String        @db.ObjectId
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}

model MainCategory {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    name          String        @unique
    selected      Boolean
    transactions  Transaction[]
    subCategories SubCategory[]
    user          User          @relation(fields: [userId], references: [id])
    userId        String        @db.ObjectId
    createdAt     DateTime      @default(now())
}

model SubCategory {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    transactions   Transaction[]
    mainCategory   MainCategory  @relation(fields: [mainCategoryId], references: [id])
    mainCategoryId String        @unique @db.ObjectId
    user           User          @relation(fields: [userId], references: [id])
    userId         String        @db.ObjectId
    createdAt      DateTime      @default(now())
}
